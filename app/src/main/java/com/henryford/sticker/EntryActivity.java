/* * Copyright (c) WhatsApp Inc. and its affiliates. * All rights reserved. * * This source code is licensed under the BSD-style license found in the * LICENSE file in the root directory of this source tree. */package com.henryford.sticker;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.util.Pair;import android.view.View;import android.widget.LinearLayout;import android.widget.TextView;import androidx.annotation.Nullable;import com.airbnb.lottie.LottieAnimationView;import com.google.android.gms.ads.nativead.NativeAd;import com.henryford.sticker.util.NativeAdWrapper;import org.jetbrains.annotations.NotNull;import java.lang.ref.WeakReference;import java.util.ArrayList;public class EntryActivity extends BaseActivity {    private View progressBar;    private LoadListAsyncTask loadListAsyncTask;    private String s;    private NativeAdWrapper nativeAdWrapper;    private LinearLayout rootView;    private LottieAnimationView lottieAnimationView;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_entry);        overridePendingTransition(0, 0);        if (getSupportActionBar() != null) {            getSupportActionBar().hide();        }        progressBar = findViewById(R.id.entry_activity_progress);        lottieAnimationView = findViewById(R.id.animation_view);        rootView = findViewById(R.id.ll_root);        loadListAsyncTask = new LoadListAsyncTask(this);        loadListAsyncTask.execute();    }    private void enterStickerListActivity(ArrayList<StickerPack> stickerPackList){        progressBar.setVisibility(View.GONE);        if (stickerPackList.size() > 1 ) {            final Intent intent = new Intent(this, StickerPackListActivity.class);            intent.putParcelableArrayListExtra(StickerPackListActivity.EXTRA_STICKER_PACK_LIST_DATA, stickerPackList);            startActivity(intent);            finish();            overridePendingTransition(0, 0);        }        else {            final Intent intent = new Intent(this, StickerPackDetailsActivity.class);            intent.putExtra(StickerPackDetailsActivity.EXTRA_SHOW_UP_BUTTON, false);            intent.putExtra(StickerPackDetailsActivity.EXTRA_STICKER_PACK_DATA, stickerPackList.get(3));            startActivity(intent);            finish();            overridePendingTransition(0, 0);        }    }    private void showSplashNativeAd(ArrayList<StickerPack> stickerPackList) {        nativeAdWrapper = new NativeAdWrapper();        nativeAdWrapper.loadUnifiedNativeAd(this, rootView, NativeAdWrapper.NATIVEAD_VIEW_HOME_SPLASH, new NativeAdWrapper.OnNativeAdLoadListener() {            @Override            public void onCustomerViewClick() {                enterStickerListActivity(stickerPackList);            }            @Override            public void onAdClicked() {                enterStickerListActivity(stickerPackList);            }            @Override            public void onNativeAdLoaded(@NotNull ArrayList<NativeAd> nativeAds) {            }            @Override            public void onLoadComplete() {                lottieAnimationView.cancelAnimation();                lottieAnimationView.clearAnimation();            }        });    }    private void showErrorMessage(String errorMessage) {        progressBar.setVisibility(View.GONE);        Log.e("EntryActivity", "error fetching sticker packs, " + errorMessage);        final TextView errorMessageTV = findViewById(R.id.error_message);        errorMessageTV.setText(getString(R.string.error_message, errorMessage));    }    @Override    protected void onDestroy() {        super.onDestroy();        if (loadListAsyncTask != null && !loadListAsyncTask.isCancelled()) {            loadListAsyncTask.cancel(true);        }        nativeAdWrapper.destroy();    }    static class LoadListAsyncTask extends AsyncTask<Void, Void, Pair<String, ArrayList<StickerPack>>> {        private final WeakReference<EntryActivity> contextWeakReference;        LoadListAsyncTask(EntryActivity activity) {            this.contextWeakReference = new WeakReference<>(activity);        }        @Override        protected Pair<String, ArrayList<StickerPack>> doInBackground(Void... voids) {            ArrayList<StickerPack> stickerPackList;            try {                final Context context = contextWeakReference.get();                if (context != null) {                    stickerPackList = StickerPackLoader.fetchStickerPacks(context);                    if (stickerPackList.size() == 0) {                        return new Pair<>("could not find any packs", null);                    }                    for (StickerPack stickerPack : stickerPackList) {                        StickerPackValidator.verifyStickerPackValidity(context, stickerPack);                    }                    return new Pair<>(null, stickerPackList);                } else {                    return new Pair<>("could not fetch sticker packs", null);                }            } catch (Exception e) {                Log.e("EntryActivity", "error fetching sticker packs", e);                return new Pair<>(e.getMessage(), null);            }        }        @Override        protected void onPostExecute(Pair<String, ArrayList<StickerPack>> stringListPair) {            final EntryActivity entryActivity = contextWeakReference.get();            if (entryActivity != null) {                if (stringListPair.first != null) {                    entryActivity.showErrorMessage(stringListPair.first);                } else {                    entryActivity.showSplashNativeAd(stringListPair.second);                }            }        }    }}